if Meteor.isClient

  Days = new Meteor.Collection(null)
  Calendar = new Meteor.Collection(null)

  fillCalendar = (year = (new Date).getFullYear()) ->
    d = new Date("#{year}.12.31")
    year = new Array()
    while d.getFullYear() > new Date().getFullYear()-1
      Calendar.insert({
        date: d
        date_string: d.yyyymmdd(), 
        month_string: (d.getMonth()+1).toString(), 
        day_string: d.getDate().toString(),
        year_string: d.getFullYear().toString(),
        })
      d.setDate(d.getDate()-1)



  saveSettings = (host, key, user, tzg) ->
    localStorage['apiKey'] = key
    localStorage['miteHost'] = host
    localStorage['user'] = JSON.stringify user 
    localStorage['tzg'] = parseInt(tzg,10)
    Session.set 'key', key

  clearSettings = ->
    localStorage.removeItem 'apiKey'
    localStorage.removeItem 'miteHost'
    localStorage.removeItem 'user'
    localStorage.removeItem 'tzg'
    Session.set 'key', undefined

  easterSunday = (year = (new Date).getFullYear()) ->
    a = year % 19
    b = ~~(year / 100)
    c = year % 100
    d = ~~(b / 4)
    e = b % 4
    f = ~~((b + 8) / 25)
    g = ~~((b - f + 1) / 3)
    h = (19 * a + b - d - g + 15) % 30
    i = ~~(c / 4)
    k = c % 4
    l = (32 + 2 * e + 2 * i - h - k) % 7
    m = ~~((a + 11 * h + 22 * l) / 451)
    n = h + l - 7 * m + 114
    month = ~~(n / 31)
    day = (n % 31) + 1
    new Date("#{year}.#{month}.#{day}")

  sechsileuten = (year = (new Date).getFullYear()) ->
    thrMon = getNthDayOfMonth(year, 4, 1, 3)
    if new Date(easterSunday(year).getTime() + (3600000*24)).ddmm() == "#{thrMon}.4"
      "#{thrMon+7}.4"
    else if new Date(easterSunday(year).getTime() - (6*3600000*24)).ddmm() == "#{thrMon}.4" || year == '2015' # for some reason 2015 is different...
      "#{thrMon-7}.4"
    else
      "#{thrMon}.4"

  knabenschiessen = (year = (new Date).getFullYear()) ->
    knSun = getNthDayOfMonth(year, 9, 0, 2)
    "#{knSun+1}.9"

  Date.prototype.yyyymmdd = ->
    yyyy = this.getFullYear().toString()
    mm = (this.getMonth()+1).toString()
    dd  = this.getDate().toString()
    # uncomment if you need leading zeros before month and days
    # yyyy + '-' + if mm[1] then mm else "0"+mm[0] + '-' + if dd[1] then dd else "0"+dd[0]
    "#{yyyy}-#{mm}-#{dd}"

  Date.prototype.ddmm = ->
    mm = (this.getMonth()+1).toString()
    dd  = this.getDate().toString()
    "#{dd}.#{mm}"

  getMiteTime = (date = (new Date).yyyymmdd()) ->
    Meteor.call 'getTime', localStorage['apiKey'], localStorage['miteHost'], date, JSON.parse(localStorage['user']).id, (err, response) ->
      result = JSON.parse(response.content)
      if result.length > 0
        ist = result[0].time_entry_group.minutes * 60
        Days.update({date: date}, {$set: {ist: ist}})
      
  getNthDayOfMonth = (year, month, day, number) ->
    first = new Date year, month-1, 1
    day_of_week = first.getDay()
    ((number-1)*7+1) + ((7+day) - day_of_week) % 7
    
  setDays = (year = (new Date).getFullYear()) ->
    d = new Date()
    while d.getFullYear() > new Date().getFullYear()-1
      Days.insert({
        date: d.yyyymmdd(), 
        month: (d.getMonth()+1).toString(), 
        day: d.getDate().toString(),
        year: d.getFullYear().toString(),
        soll: getTargetTime(d.yyyymmdd(),localStorage['tzg']), 
        ist: 0,
        differenz: 0
        })
      getMiteTime d.yyyymmdd()
      d.setDate(d.getDate()-1)
    
  getTargetTime = (date = (new Date).yyyymmdd(), tzg = 100) ->
    d = new Date(date)
    freeDays = ['1.1', '2.1', '1.5', '1.8', '25.12', '26.12']
    halfDays = []
    es = easterSunday(d.getFullYear())
    freeDays.push new Date(es.getTime() - (2*3600000*24)).ddmm() #Oster Freitag
    freeDays.push new Date(es.getTime() + (3600000*24)).ddmm() #Oster Montag
    freeDays.push new Date(es.getTime() + (39*3600000*24)).ddmm() #Auffahrt
    freeDays.push new Date(es.getTime() + (50*3600000*24)).ddmm() #PfingstMontag
    halfDays.push sechsileuten(d.getFullYear()) 
    halfDays.push knabenschiessen(d.getFullYear())
    # no work on sunday and saturday
    if d.getDay() == 0 || d.getDay() == 6 
      return 0
    else if d.ddmm() in freeDays
      return 0
    else if d.ddmm() in halfDays
      ((42*60*60/5) / 100 * tzg)/2 
    else
      (42*60*60/5) / 100 * tzg



# TEMPLATE functions
  Template.calendar.days = ->
    Days.find({})

# fillCalendar = (year = (new Date).getFullYear()) ->
#     d = new Date("#{year}.12.31")
#     year = new Array()
#     while d.getFullYear() > new Date().getFullYear()-1
#       Calendar.insert({
#         date: d
#         date_string: d.yyyymmdd(), 
#         month_string: (d.getMonth()+1).toString(), 
#         day_string: d.getDate().toString(),
#         year_string: d.getFullYear().toString(),
#         })
#       d.setDate(d.getDate()-1)


  Template.calendar.year = ->
    d = new Date("2013.12.31")
    year = new Array()
    while d.getFullYear() > new Date().getFullYear()-1
      console.log d.yyyymmdd()
    
  Template.mite.user = ->
    this.user = JSON.parse localStorage['user']
    
  Template.body.key = -> Session.get 'key'    

  Template.mite.events
    'click #optout': ->
      clearSettings()
  
  Template.settings.events
     'submit': (event, template) ->
        event.preventDefault()
        Meteor.call "checkKey", $("#apiKey").val(), $("#miteHost").val(), (err, response) ->
          if response.headers.status is '200 OK'
            saveSettings $("#miteHost").val(), $("#apiKey").val(), response.data.user, $("#tzg").val()
          else
            clearSettings()

  
  if localStorage['apiKey']
    Session.set 'key', localStorage['apiKey'] 
    setDays()
    fillCalendar()

  
  

#SERVER stuff     
if Meteor.isServer
  Meteor.methods
    checkKey: (key, host) ->
      url = "https://#{host}.mite.yo.lk/myself.json"
      Meteor.http.call('GET', url, 
        params:
          api_key: key
      )
    getTime: (key, host, date, userId) ->
      url = "https://#{host}.mite.yo.lk/time_entries.json"
      bla = Meteor.http.call('GET', url,
        params:
          api_key: key,
          at: date,
          user_id: userId
          group_by: 'day'
      )
    
      
      

  Meteor.startup ->
    # code to run on server at startup
    